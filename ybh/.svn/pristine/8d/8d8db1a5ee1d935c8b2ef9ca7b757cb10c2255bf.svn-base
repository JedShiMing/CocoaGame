import BalancePassedView from './js/BalancePassedView'
import FriendPassedView from './js/FriendPassedView'

const RANK_ITEM_HEIGHT = 108;
const RANK_ITEM_PADDING = 14;
const PADDING_BOTTOM_H = 50;

cc.Class({
    extends: cc.Component,

    properties: {
        openData1: cc.Node,
        scrollView: cc.ScrollView,
        RankItemPre: cc.Prefab,
        scrView: cc.Node,

        openData3: cc.Node,
        openData4: cc.Node,
    },

    start: function () {
        if (!this.isWxApp()) {
            return;
        }
        let self = this
        wx.onMessage(data => {
            console.log('收到主域消息',data)
            if (data.cmd === 1) { // eg
                this.openData1.active = true;
                this.openData3.active = false;
                this.openData4.active = false;
                this.tabId = data.cmd;
                this.showNextWrap(data.data.score);
                this.setNextWrapPosition(data.data.pos);
            } else if (data.cmd === 2) {  // 排行榜
                console.log("wx.onMessage: ", data.cmd, data.data)
                RankUtil.getWXInfo();
                this.openData1.active = true;
                this.openData3.active = false;
                this.openData4.active = false;
                if (!self._isAllScreen) {
                    if (data.data.isAllScreen) {
                        self._isAllScreen = 1;
                        self.scrollView.node.y = self.scrollView.node.y - 30
                        self.scrView.height = self.scrView.height - PADDING_BOTTOM_H
                    } else {
                        self._isAllScreen = 0;
                        self.scrollView.node.y = self.scrollView.node.y + 4
                    }
                    this.players = [];
                }
                // this.players = list
                // this.renderRank()
                this.requestDataFromServer()
            } else if (data.cmd === 3) { // 已通关好友
                this.openData1.active = false;
                this.openData4.active = false;
                this.showFriendPass(data.data)
            } else if (data.cmd === 4) { // 已通关好友
                this.openData1.active = false;
                this.openData3.active = false;
                this.showBalancePass(data.data)
            }
            else {
                this.openData1.active = false;
                this.openData3.active = false;
                this.openData4.active = false;
                this.tabId = 0;
            }
        });
    },

    requestDataFromServer: function () {
        var self = this;
        //取出所有好友数据
        wx.getFriendCloudStorage({
            keyList: ["score"],
            success: res => {
                console.log("wx.getFriendCloudStorage success", res);
                self.players = [];

                for (let i = 0; i < res.data.length; i++) {
                    var data = res.data[i];

                    var obj = null;

                    for (let k = 0; k < data.KVDataList.length; k++) {
                        var kvData = data.KVDataList[k];

                        if (kvData.key === "score") {
                            obj = JSON.parse(kvData.value);
                            break;
                        }

                        if (obj) {
                            break;
                        }
                    }

                    if (obj) {
                        var player = {};
                        player.score = obj.score || 0;
                        player.startTime = obj.startTime || 0;
                        player.endTime = obj.endTime || 0;
                        player.openid = data.openid;
                        player.nickname = data.nickname;
                        player.avatarUrl = data.avatarUrl;
                        self.players.push(player);
                    }
                }
                self.players.sort(function (a, b) {
                    return -(a.score - b.score)
                })
                if (self.players.length > 0) {
                    console.log('有好友 -- ', self.players);
                    self.renderRank()
                } else {
                    console.log('没有好友')
                }
            },
            fail: res => {
                console.log("wx.getFriendCloudStorage fail", res);
            },
        });
    },

    renderRank() {
        let self = this;
        let friends = self.players;
        let total_height = friends.length * RANK_ITEM_HEIGHT + RANK_ITEM_PADDING * (friends.length - 1);

        if (total_height < self.scrollView.node.height) {
            total_height = self.scrollView.node.height;
        } else {
            total_height += PADDING_BOTTOM_H * self._isAllScreen
        }
        // let myPlayer = null;
        // let myRank;
        self.scrollView.content.height = total_height
        for (let i = 0; i < friends.length; i++) {
            let item = cc.instantiate(self.RankItemPre);
            self.scrollView.content.addChild(item);

            item.getComponent("RankItemPrefab").setPlayerInfo(i + 1, friends[i].avatarUrl, friends[i].nickname, friends[i].score, false);

            item.x = self.scrollView.content.width / 2;
            item.y = -(i * (RANK_ITEM_HEIGHT + RANK_ITEM_PADDING) + RANK_ITEM_HEIGHT / 2)
            // if (friends[i].selfFlag) {
            //     self.startY = i * (RANK_ITEM_PADDING + RANK_ITEM_HEIGHT)
            //     myPlayer = friends[i];
            //     myRank = i + 1;
            // }
            console.log(item.x, item.y)
        }

        // if (myPlayer) {
        //     self.selfItem = cc.instantiate(self.RankItemPre);
        //     self.bg.addChild(self.selfItem);
        //
        //     self.selfItem.getComponent("RankItemPrefab").setPlayerInfo(myRank, myPlayer.avatarUrl, myPlayer.nickname, myPlayer.score, true);
        //     self.selfItem.x = 0;
        //     self.selfItem.y = -(self.scrollView.node.height / 2);
        //     self.selfItem.active = self.scrView.height < self.startY
        // }
    },
    isWxApp: function () {
        return 'undefined' !== typeof (wx);
    },


    showFriendPass(data) {
        this.openData3.active = true
        this.openData3.getComponent(FriendPassedView).updatePoint(data.pointId)

    },
    showBalancePass(info) {
        this.openData4.active = true
        this.openData4.getComponent(BalancePassedView).updatePoint(info)
    },
});
