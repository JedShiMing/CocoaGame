const itemWidth = 90

cc.Class({
    extends: cc.Component,

    properties: {
        qqCon: cc.Node,
        heads: [cc.Node],
        label_time: [cc.Label],
        btn_left: cc.Button,
        btn_right: cc.Button,
        wxDisplay: cc.Sprite,
    },

    // LIFE-CYCLE CALLBACKS:
    onLoad: function () {
        AF.EventDispatcher.on('UpdateBalancePassed', this.updatePoint, this)

        this.qqCon.active = false
        this.btn_left.interactable = false
        this.btn_right.interactable = false
        this.clearHeads()
        this.initCanvas()
        this.page = 0
    },
    onDestroy() {
        AF.EventDispatcher.off('UpdateBalancePassed', this.updatePoint, this)
    },
    updatePoint: function ({ pointId, costTime }) {
        this.pointId = pointId
        this.costTime = costTime
        if (AF.platform.isWxApp()) {
            AF.util.postMessage(4, { pointId, costTime });
        }
        else if (AF.platform.isQQApp()) {
            this.qqCon.active = true
            AF.util.getRankList(list => {
                if (list) {
                    list = list.filter(item => item.score >= this.pointId)
                    this.list = this.randomTime(list)
                    this.list.sort((a, b) => a.time > b.time)
                    let page = 0
                    for (let i = 0; i < this.list.length; i++) {
                        if (this.list[i].selfFlag) {
                            page = Math.floor(i / 3)
                            break
                        }
                    }
                    this.setPage(page)
                }
            })
        }
    },
    randomTime(list) {
        let time = 2 + Math.ceil(Math.sqrt(this.pointId) * (1 + Math.random()))
        for (let i = 0; i < list.length; i++) {
            if (!list[i].selfFlag) {
                time += Math.floor(Math.random() * 6)
                list[i].time = time
                // list[i].url = list[0].url
            } else {
                list[i].time = Math.floor(this.costTime / 1000)
            }
        }
        return list
    },
    setPage(page) {
        if (!this.node || !this.node.active) {
            return
        }
        this.page = page
        let totalPage = Math.ceil(this.list.length / 3)
        this.btn_left.interactable = page > 0
        this.btn_right.interactable = page < totalPage - 1

        this.updateHeads(page)
    },
    nextPage() {
        this.setPage(this.page + 1)
    },
    lastPage() {
        this.setPage(this.page - 1)
    },
    updateHeads: function (page) {
        this.clearHeads()
        for (let i = page * 3; i < page * 3 + 3 && i < this.list.length; i++) {
            this.heads[i % 3].active = true
            this.heads[i % 3].getComponent("PhotoPrefab").setPhoto(this.list[i].url);
            this.label_time[i % 3].string = this.list[i].time + '秒';
        }
    },
    clearHeads() {
        this.heads.forEach(item => item.getComponent("PhotoPrefab").clearPhoto())
        this.label_time.forEach(item => item.string = '')
    },

    // 初始化子域适配信息
    initCanvas() {
        if (!AF.platform.isWxApp()) {
            return
        }
        let _canvas = cc.Canvas.instance;
        let _rateR = _canvas.designResolution.height / _canvas.designResolution.width;
        let _rateV = cc.director.getVisibleSize().height / cc.director.getVisibleSize().width;
        if (_rateV > _rateR) {
            _canvas.fitHeight = false;
            _canvas.fitWidth = true;
        } else {
            _canvas.fitHeight = true;
            _canvas.fitWidth = false;
        }

        //根据实际分辨率设置主域用来绘制 sharedCanvas 的 Sprite宽高
        this.wxDisplay.node.setContentSize(cc.director.getVisibleSize());
        //得到一个Texture实例，用来在主域渲染sharedCanvas
        this.tex = new cc.Texture2D();
        //sharedCanvas的宽高一定不要自己设置，要用默认的，否则触碰会不正确
        window.sharedCanvas.width = 640;
        window.sharedCanvas.height = 1136;

        // AF.util.postMessage(2, { isAllScreen: AF.util.isAllScreen() });
    },

    // 刷新子域的纹理
    _updateSubDomainCanvas() {
        if (window.sharedCanvas !== undefined) {
            this.tex.initWithElement(window.sharedCanvas);
            this.tex.handleLoadedTexture();
            this.wxDisplay.spriteFrame = new cc.SpriteFrame(this.tex);
        }
    },
    update: function update() {
        this._updateSubDomainCanvas();
    },
})



