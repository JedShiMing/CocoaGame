
cc.Class({
    extends: cc.Component,

    properties: {
        openData1: cc.Node,
        openData2: cc.Node,
        nextWrap: cc.Node,
        head: cc.Sprite,
        score: cc.Label,
    },

    start: function () {

        this.init();

        if (!this.isWxApp()) {
            return;
        }

        wx.onMessage(data => {

            console.log("wx.onMessage: ", data.cmd, data.data)

            if (data.cmd == 1) {
                this.openData1.active = true;
                this.openData2.active = false;
                this.tabId = data.cmd;
                this.showNextWrap(data.data.score);
                this.setNextWrapPosition(data.data.pos);
            } else if (data.cmd == 2) {
                this.openData1.active = false;
                this.openData2.active = true;
                this.tabId = data.cmd;
            } else {
                this.openData1.active = false;
                this.openData2.active = false;
                this.tabId = 0;
            }
        });
    },

    init: function () {
        this.tabId = 1;

        this.openData1.active = true;
        this.openData2.active = false;

        this.myData1 = null;
        this.myData2 = null;

        this.lastRequestTime = 30;
        this.requestStatus = 0;

        this.players = [];
    },

    update: function (dt) {
        this.updateRequestData(dt);
    },

    setNextWrapPosition: function (pos) {
        var nodePos = this.openData1.convertToNodeSpaceAR(pos);
        this.nextWrap.x = nodePos.x;
        this.nextWrap.y = nodePos.y;
    },

    showNextWrap: function (score) {
        var player = null;

        for (let i = 0; i < this.players.length; i++) {
            if (this.players[i].score <= score) {
                continue;
            }

            if (player) {
                if (this.players[i].score < player.score) {
                    player = this.players[i];
                }
            } else {
                player = this.players[i];
            }
        }

        if (!player) {
            this.nextWrap.active = false;
            return;
        }

        this.nextWrap.active = true;

        this.score.string = cc.js.formatStr("%d", player.score) + "分";
        this.setPhoto(this.head, player.avatarUrl);
    },

    updateRequestData: function (dt) {
        if (this.requestStatus != 0) {
            return;
        }

        this.lastRequestTime += dt;

        if (this.lastRequestTime < 30) {
            return
        }

        this.lastRequestTime = 0;

        this.requestDataFromServer();
    },

    requestDataFromServer: function () {

        var self = this;

        if (!self.isWxApp()) {
            return;
        }

        self.requestStatus = 1;

        //取出所有好友数据
        wx.getFriendCloudStorage({
            keyList: ["score"],
            success: res => {
                console.log("wx.getFriendCloudStorage success", res);
                //console.log(res.data);
                self.requestStatus = 0;

                self.players = [];

                for (let i = 0; i < res.data.length; i++) {
                    var data = res.data[i];

                    var obj = null;

                    for (let k = 0; k < data.KVDataList.length; k++) {
                        var kvData = data.KVDataList[k];

                        if (kvData.key == "score") {
                            obj = JSON.parse(kvData.value);
                            break;
                        }

                        if (obj) {
                            break;
                        }
                    }

                    if (obj) {
                        var player = {};
                        player.score = obj.score || 0;
                        player.startTime = obj.startTime || 0;
                        player.endTime = obj.endTime || 0;
                        player.openid = data.openid;
                        player.nickname = data.nickname;
                        player.avatarUrl = data.avatarUrl;

                        self.players.push(player);
                    }
                }

                if (self.players.length > 0) {
                    console.log(self.players);
                }
            },
            fail: res => {
                console.log("wx.getFriendCloudStorage fail", res);
                self.requestStatus = 0;
            },
        });
    },

    setPhoto: function (sp, url) {
        if (url && url.length != 0) {
            cc.loader.load({ url: url, type: "jpg" }, (err, res) => {
                if (err) {
                    console.log("err: PhotoPrefab.js loadPhoto ", err);
                    return;
                }

                console.log("ok");

                sp.spriteFrame = new cc.SpriteFrame(res);
            });
        }
    },

    isWxApp: function () {
        return 'undefined' !== typeof (wx);
    },
});
