'use strict';

const fs = require('fire-fs');
const Path = require('path');

var ProjPath = Editor.projectPath;
var RES_PATH = Path.join(ProjPath, 'assets', 'resources');

var isContainDialogPrefab = function(files) {
    var len = files.length;
    for (var i = 0; i < len; ++i) {
        var o = files[i];
        if (isPrefabFile(o.path || o.destPath) && isDialogPath(o.path))
            return true;
    }
    return false;
};

// 是否是dialogs目录
var isDialogPath = function(path) {
    path = path || "";
    path = path.replace(new RegExp('\\' + Path.sep, 'g'), '/');
    if (path.indexOf('/assets/resources/') < 0)
        return false;
    var names = path.split('/');
    var l = names.length;
    for (var j = 0; j < l; ++j) {
        if (names[j] == 'dialogs') {
            return true;
        }
    }
    return false;
};

var isPrefabFile = function (path) {
    return Path.extname(path || "").toLowerCase() == '.prefab';
};

// 搜索dialog
var searchDir = function (dir, list) {
    var stat = fs.statSync(dir);
    if (!stat.isDirectory()) {
        return;
    }
    var subpaths = fs.readdirSync(dir), subpath, fileName;
    for (var i = 0; i < subpaths.length; ++i) {
        if (subpaths[i][0] === '.') {
            continue;
        }
        subpath = Path.join(dir, subpaths[i]);
        stat = fs.statSync(subpath);
        if (stat.isDirectory()) {
            searchDir(subpath, list);
        }
        else if (stat.isFile() && isDialogPath(subpath) && isPrefabFile(subpath)) {
            fileName = Path.basename(subpath, '.prefab');
            subpath = subpath.replace(new RegExp('\\' + Path.sep, 'g'), '/');
            list[fileName] = subpath.split('/resources/')[1]; 
            list[fileName] = list[fileName].replace(fileName + '.prefab', fileName);
        }
    }
};

var mkdirSync = function (path) {
    try {
        fs.mkdirSync(path);
    } catch (e) {
        if (e.code != 'EEXIST') throw e;
    }
};

var checkDialogModule = function(path) {
    var s = path.split('/');
    if (s[0] == "framework") {
        return 0;
    }
    if (s[0] == 'hall') return 1;
};

var sortDialog = function(dialogs) {
    var info = {
        dialogs: dialogs,
        module: {
            framework: [],
            hall: []
        }
    };
    for (var k in dialogs) {
        var x = checkDialogModule(dialogs[k]);
        if (x === 0) {
            info.module.framework.push(k);
        } else if (x === 1) {
            info.module.hall.push(k);
        }
    }
    return info;
};

var gennerateDialogList = function() {

    var dialogList = {};

    searchDir(RES_PATH, dialogList)

    dialogList = sortDialog(dialogList);

    var dest = Path.join(RES_PATH, 'framework', 'config');

    mkdirSync(dest);

    var destFile = Path.join(dest, 'dialog_list.json');

    fs.writeFile(destFile, JSON.stringify(dialogList, null, '\t'), (err) => {
        if (err) throw err;
        Editor.log('dialog list file updated.');
    });

    Editor.assetdb.refresh("db://assets/resources/framework/config/dialog_list.json");
};

module.exports = {
    onAssetsUpdated: function(event, files) {
        if (isContainDialogPrefab(files)) {
            gennerateDialogList();
        }
    },
};