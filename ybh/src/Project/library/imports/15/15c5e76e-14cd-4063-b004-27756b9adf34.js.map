{"version":3,"sources":["../../../../../assets/framework/logic/assets/framework/logic/af-game-config.js"],"names":["quickSort","arr","comp","length","pivotIndex","Math","floor","pivot","splice","left","right","i","change","push","concat","GameConfig","init","modelCfg","playerCfg","pointCfg","maxPointId","playerIds","setGameConfig","name","res","setPlayerCfg","setModelCfg","setPointCfg","id","getPlayerInfo","key","info","actions","modelInfo","getModelInfo","model","head","chest","revive","x","dead","y","rate","console","log","pointId","getPointInfo","getMaxPointNum","getRandomPlayerId","index","AF","Random","getRandomIn","module","exports"],"mappings":"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","file":"af-game-config.js","sourceRoot":"../../../../../assets/framework/logic","sourcesContent":["/**\r\n * 游戏配置\r\n */\r\n\r\nvar quickSort = function (arr, comp) {\r\n    if (arr.length <= 1) { return arr; }\r\n    var pivotIndex = Math.floor(arr.length / 2);\r\n    var pivot = arr.splice(pivotIndex, 1)[0];\r\n    var left = [];\r\n    var right = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n        let change = comp && comp(arr[i], pivot);\r\n\r\n        if (change) {\r\n            left.push(arr[i]);\r\n        } else {\r\n            right.push(arr[i]);\r\n        }\r\n    }\r\n    return quickSort(left, comp).concat([pivot], quickSort(right, comp));\r\n};\r\n\r\nvar GameConfig = {\r\n\r\n    init: function () {\r\n\r\n        this.modelCfg = null;\r\n        this.playerCfg = null;\r\n        this.pointCfg = null;\r\n\r\n        this.maxPointId = 0;\r\n        this.playerIds = [];\r\n    },\r\n\r\n    setGameConfig: function (name, res) {\r\n        if (name == \"player\") {\r\n            //英雄表\r\n            this.setPlayerCfg(res);\r\n        } else if (name == \"model\") {\r\n            this.setModelCfg(res);\r\n        } else if (name == \"point\") {\r\n            this.setPointCfg(res);\r\n        }\r\n    },\r\n\r\n    setPlayerCfg: function (res) {\r\n        if (this.playerCfg) {\r\n            return;\r\n        }\r\n\r\n        this.playerCfg = {};\r\n        this.playerIds = [];\r\n\r\n        for (let i = 0; i < res.length; i++) {\r\n            var id = res[i].id;\r\n            this.playerCfg[id] = res[i];\r\n            this.playerIds.push(id);\r\n        }\r\n    },\r\n\r\n    getPlayerInfo: function (key) {\r\n        var info = this.playerCfg[key];\r\n\r\n        if (!info) {\r\n            return info;\r\n        }\r\n\r\n        if (!info.actions) {\r\n            var modelInfo = this.getModelInfo(info.model);\r\n            info.head = modelInfo.head;\r\n            info.chest = modelInfo.chest;\r\n            info.actions = modelInfo.actions;\r\n        }\r\n\r\n        if (!info.actions.revive) {\r\n            info.actions.revive = {};\r\n            info.actions.revive.x = info.actions.dead.x;\r\n            info.actions.revive.y = info.actions.dead.y;\r\n            info.actions.revive.rate = info.actions.dead.rate;\r\n        }\r\n\r\n        return info;\r\n    },\r\n\r\n    setPointCfg: function (res) {\r\n        console.log(res);\r\n\r\n        if (this.pointCfg) {\r\n            return;\r\n        }\r\n\r\n        this.pointCfg = {};\r\n\r\n        for (let i = 0; i < res.length; i++) {\r\n            var pointId = i + 1;\r\n\r\n            this.pointCfg[pointId] = res[i];\r\n        }\r\n    },\r\n\r\n    getPointInfo: function (pointId) {\r\n        return this.pointCfg[pointId];\r\n    },\r\n\r\n    getMaxPointNum: function () {\r\n        return this.maxPointId;\r\n    },\r\n\r\n    getRandomPlayerId: function () {\r\n        var index = AF.Random.getRandomIn(1, this.playerIds.length);\r\n\r\n        return this.playerIds[index - 1];\r\n    },\r\n\r\n    setModelCfg: function (res) {\r\n        if (this.modelCfg) {\r\n            return;\r\n        }\r\n\r\n        this.modelCfg = {};\r\n        for (let i = 0; i < res.length; i++) {\r\n            var id = res[i].id;\r\n            this.modelCfg[id] = res[i];\r\n        }\r\n    },\r\n\r\n    getModelInfo: function (key) {\r\n        return this.modelCfg[key];\r\n    },\r\n};\r\n\r\nGameConfig.init();\r\n\r\nAF.GameConfig = module.exports = GameConfig;\r\n\r\n"]}